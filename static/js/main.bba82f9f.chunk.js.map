{"version":3,"sources":["features/game/Game.module.css","app/hooks.ts","features/game/gameSlice.ts","features/game/GridCell.tsx","features/game/Game.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useSelector","initialState","phase","gridSize","width","height","units","positions","x","y","length","stats","name","maxLength","range","movement","attack","color","headColor","id","reduce","map","unit","overlaps","position","existingPosition","locationValid","newPosition","oldPositions","oldHead","Math","abs","overlapsAnything","unitAt","state","Object","values","gameSlice","createSlice","reducers","moveUnit","action","undefined","selectedUnit","payload","push","shift","selectUnit","cancel","targetPosition","target","head","isInRange","splice","actions","GridCell","dispatch","game","handleClick","event","button","preventDefault","style","backgroundColor","onContextMenu","onClick","getColor","i","unitPosition","positionOfGrid","floor","grid","Array","keys","Game","Fragment","className","styles","wrapper","App","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","value","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","gameReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bba82f9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__3oH14\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport Unit from \"../unit/Unit\";\nimport { Position } from \"./Position\";\n\nexport interface GameState {\n    units: { [key: string]: Unit };\n    selectedUnit?: string;\n    phase: \"select\" | \"action\";\n    gridSize: { width: number, height: number };\n};\n\nconst defaultUnits = [{\n    positions: [{ x: 0, y: 0 }],\n    length: 1,\n    stats: {\n        name: \"Red\",\n        maxLength: 3,\n        range: 1,\n        movement: 1,\n        attack: 1,\n        color: \"red\",\n        headColor: \"brown\",\n        id: \"a\",\n    }\n},\n{\n    positions: [{ x: 4, y: 4 }],\n    length: 1,\n    stats: {\n        name: \"Yellow\",\n        maxLength: 3,\n        range: 1,\n        movement: 1,\n        attack: 1,\n        color: \"yellow\",\n        headColor: \"green\",\n        id: \"b\",\n    }\n}];\n\nconst initialState: GameState = {\n    phase: \"select\",\n    gridSize: { width: 10, height: 10 },\n    units: defaultUnits.reduce((map: { [key: string]: Unit }, unit) => {\n        map[unit.stats.id] = unit;\n        return map;\n    }, {}),\n};\n\nconst overlapsAnything = (units: Unit[], newPosition: Position) => {\n    for (const unit of units) {\n        if (overlaps(unit.positions, newPosition)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst overlaps = (positions: Position[], position: Position) => {\n    for (const existingPosition of positions) {\n        if (existingPosition.x === position.x && existingPosition.y === position.y) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst locationValid = (units: Unit[], unit: Unit, newPosition: Position) => {\n    const oldPositions = unit.positions;\n    const oldHead = oldPositions[oldPositions.length - 1];\n    return Math.abs(newPosition.x - oldHead.x) +\n        Math.abs(newPosition.y - oldHead.y) <= 1 &&\n        !overlapsAnything(units, newPosition);\n}\n\nconst unitAt = (position: Position, state: GameState) => {\n    for (const unit of Object.values(state.units)) {\n        if (overlaps(unit.positions, position)) {\n            return unit;\n        }\n    }\n}\n\nconst isInRange = (unit: Unit, target: Position) => {\n    const head = unit.positions[unit.positions.length - 1];\n    return Math.abs(head.x - target.x) + Math.abs(head.y - target.y) <= unit.stats.range;\n}\n\n\nexport const gameSlice = createSlice({\n    name: 'game',\n    initialState,\n    reducers: {\n        moveUnit: (state: GameState, action: PayloadAction<Position>) => {\n            if (state.phase !== \"action\" || state.selectedUnit === undefined) {\n                return;\n            }\n            const unit = state.units[state.selectedUnit];\n            if (locationValid(Object.values(state.units), unit, action.payload)) {\n                unit.positions.push(action.payload);\n            }\n            if (unit.positions.length > unit.stats.maxLength) {\n                unit.positions.shift();\n            }\n        },\n        selectUnit: (state: GameState, action: PayloadAction<Position>) => {\n            if (state.phase !== \"select\") {\n                return;\n            }\n            const unit = unitAt(action.payload, state);\n            if (unit) {\n                state.phase = \"action\";\n                state.selectedUnit = unit.stats.id;\n            }\n        },\n        cancel: (state: GameState) => {\n            state.selectedUnit = undefined;\n            state.phase = \"select\";\n        },\n        attack: (state: GameState, action: PayloadAction<Position>) => {\n            const targetPosition = action.payload;\n            const target = unitAt(targetPosition, state);\n            if (state.phase !== \"action\" || state.selectedUnit === undefined || !target) {\n                return;\n            }\n            const unit = state.units[state.selectedUnit];\n            if (unit === target) {\n                return; // stop hitting yourself!\n            }\n            if (!isInRange(unit, targetPosition)) {\n                return;\n            }\n            if (unit.stats.attack >= target.positions.length) {\n                delete state.units[target.stats.id];\n            }\n            target.positions.splice(0, unit.stats.attack);\n        }\n    },\n});\n\nexport const { moveUnit, selectUnit, cancel, attack } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { attack, moveUnit, selectUnit } from \"./gameSlice\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { Position } from \"./Position\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\n\n\ntype Props = {\n    position: Position,\n    color?: string,\n};\n\nexport const GridCell = ({ position, color }: Props) => {\n    const dispatch = useAppDispatch();\n    const { phase } = useSelector((state: RootState) => state.game);\n    const handleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        switch (phase) {\n            case \"action\":\n                switch (event.button) {\n                    case 0:\n                        dispatch(moveUnit(position)); break;\n                    case 2:\n                        dispatch(attack(position));\n                        event.preventDefault();\n                        break;\n\n                }; break;\n            case \"select\":\n                dispatch(selectUnit(position)); break;\n        }\n    }\n    return <div\n        style={{ backgroundColor: color }}\n        onContextMenu={handleClick}\n        onClick={handleClick}\n    >{position.x + \" \" + position.y}</div>;\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\"\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { RootState } from \"../../app/store\";\nimport Unit from \"../unit/Unit\";\nimport styles from './Game.module.css';\nimport { cancel } from \"./gameSlice\";\nimport { GridCell } from \"./GridCell\";\nimport { Position } from \"./Position\";\n\nconst getColor = (position: Position, units: Unit[]) => {\n    for (const unit of units) {\n        for (let i = 0; i < unit.positions.length; i++) {\n            const unitPosition = unit.positions[i];\n            if (unitPosition.x === position.x && unitPosition.y === position.y) {\n                return i === unit.positions.length - 1 ? unit.stats.headColor : unit.stats.color;\n            }\n        }\n    }\n}\n\nconst positionOfGrid = (i: number, gridSize: { height: number, width: number }) => {\n    const x = Math.floor(i / gridSize.width);\n    const y = i % gridSize.height;\n    return { x, y };\n}\n\nconst grid = (gridSize: { height: number, width: number }, units: Unit[]) =>\n    [...Array(gridSize.height * gridSize.width).keys()]\n        .map(i =>\n            <GridCell\n                key={i}\n                color={getColor(positionOfGrid(i, gridSize), units)}\n                position={positionOfGrid(i, gridSize)} />\n        );\n\nexport function Game() {\n    const dispatch = useAppDispatch();\n    const { units, gridSize, phase, selectedUnit } = useSelector((state: RootState) => state.game);\n    return (\n        <React.Fragment>\n            <p>{phase}{selectedUnit !== undefined ? \": \" + units[selectedUnit].stats.name : \"\"}</p>\n            <div className={styles.wrapper}>\n                {grid(gridSize, Object.values(units))}\n            </div>\n            <button onClick={() => dispatch(cancel())}>cancel</button>\n        </React.Fragment>\n    );\n}\n","import './App.css';\nimport { Game } from './features/game/Game';\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport gameReducer from '../features/game/gameSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    game: gameReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}