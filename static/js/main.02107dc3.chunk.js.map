{"version":3,"sources":["app/hooks.ts","features/game/gameSlice.ts","features/game/GridCell.tsx","features/game/Game.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx","features/game/Game.module.css"],"names":["useAppDispatch","useDispatch","useSelector","initialState","turn","phase","gridSize","width","height","units","positions","x","y","movesUsed","attackUsed","stats","name","maxLength","range","movement","attack","color","headColor","id","reduce","map","unit","overlaps","position","existingPosition","locationValid","newPosition","oldPositions","oldHead","length","Math","abs","overlapsAnything","unitAt","gameSlice","createSlice","reducers","move","state","action","undefined","selectedUnit","getUnitList","payload","push","shift","select","reset","targetPosition","target","head","isInRange","splice","endTurn","actions","getSelectedUnit","Object","values","GridCell","selected","dispatch","game","handleClick","event","button","isEmpty","preventDefault","style","backgroundColor","className","styles","onContextMenu","onClick","getColor","i","unitPosition","positionOfGrid","floor","isSelected","some","grid","Array","keys","Game","Fragment","wrapper","App","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","value","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","gameReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.02107dc3.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport Unit from \"../unit/Unit\";\nimport { Position } from \"./Position\";\n\nexport interface GameState {\n    turn: number;\n    units: { [key: string]: Unit };\n    selectedUnit?: string;\n    phase: \"action\";\n    gridSize: { width: number, height: number };\n};\n\nconst defaultUnits: Unit[] = [{\n    positions: [{ x: 0, y: 0 }],\n    movesUsed: 0,\n    attackUsed: false,\n    stats: {\n        name: \"Red\",\n        maxLength: 5,\n        range: 1,\n        movement: 2,\n        attack: 3,\n        color: \"red\",\n        headColor: \"brown\",\n        id: \"a\",\n    }\n},\n{\n    positions: [{ x: 4, y: 4 }],\n    movesUsed: 0,\n    attackUsed: false,\n    stats: {\n        name: \"Yellow\",\n        maxLength: 2,\n        range: 3,\n        movement: 1,\n        attack: 1,\n        color: \"yellow\",\n        headColor: \"green\",\n        id: \"b\",\n    }\n},\n{\n    positions: [{ x: 9, y: 9 }],\n    movesUsed: 0,\n    attackUsed: false,\n    stats: {\n        name: \"Purple\",\n        maxLength: 1,\n        range: 1,\n        movement: 5,\n        attack: 2,\n        color: \"purple\",\n        headColor: \"pink\",\n        id: \"p\",\n    }\n}];\n\nconst initialState: GameState = {\n    turn: 0,\n    phase: \"action\",\n    gridSize: { width: 10, height: 10 },\n    units: defaultUnits.reduce((map: { [key: string]: Unit }, unit) => {\n        map[unit.stats.id] = unit;\n        return map;\n    }, {}),\n};\n\nconst overlapsAnything = (units: Unit[], newPosition: Position) => {\n    for (const unit of units) {\n        if (overlaps(unit.positions, newPosition)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst overlaps = (positions: Position[], position: Position) => {\n    for (const existingPosition of positions) {\n        if (existingPosition.x === position.x && existingPosition.y === position.y) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst locationValid = (units: Unit[], unit: Unit, newPosition: Position) => {\n    const oldPositions = unit.positions;\n    const oldHead = oldPositions[oldPositions.length - 1];\n    return Math.abs(newPosition.x - oldHead.x) +\n        Math.abs(newPosition.y - oldHead.y) <= 1 &&\n        !overlapsAnything(units, newPosition);\n}\n\nexport const unitAt = (position: Position, units: Unit[]) => {\n    for (const unit of units) {\n        if (overlaps(unit.positions, position)) {\n            return unit;\n        }\n    }\n}\n\nconst isInRange = (unit: Unit, target: Position) => {\n    const head = unit.positions[unit.positions.length - 1];\n    return Math.abs(head.x - target.x) + Math.abs(head.y - target.y) <= unit.stats.range;\n}\n\n\nexport const gameSlice = createSlice({\n    name: 'game',\n    initialState,\n    reducers: {\n        move: (state: GameState, action: PayloadAction<Position>) => {\n            if (state.phase !== \"action\" || state.selectedUnit === undefined) {\n                return;\n            }\n            const unit = state.units[state.selectedUnit];\n            if (unit.movesUsed >= unit.stats.movement) {\n                return;\n            }\n            if (locationValid(getUnitList(state), unit, action.payload)) {\n                unit.positions.push(action.payload);\n                unit.movesUsed++;\n            }\n            if (unit.positions.length > unit.stats.maxLength) {\n                unit.positions.shift();\n            }\n        },\n        select: (state: GameState, action: PayloadAction<Position>) => {\n            const unit = unitAt(action.payload, getUnitList(state));\n            if (unit) {\n                state.phase = \"action\";\n                state.selectedUnit = unit.stats.id;\n            }\n        },\n        reset: () => {\n            return initialState;\n        },\n        attack: (state: GameState, action: PayloadAction<Position>) => {\n            const targetPosition = action.payload;\n            const target = unitAt(targetPosition, getUnitList(state));\n            if (state.phase !== \"action\" || state.selectedUnit === undefined || !target) {\n                return;\n            }\n            const unit = state.units[state.selectedUnit];\n            if (unit === target || unit.attackUsed || !isInRange(unit, targetPosition)) {\n                return;\n            }\n            unit.attackUsed = true;\n            if (unit.stats.attack >= target.positions.length) {\n                delete state.units[target.stats.id];\n            }\n            target.positions.splice(0, unit.stats.attack);\n        },\n        endTurn: (state: GameState) => {\n            state.turn++;\n            for (const unit of getUnitList(state)) {\n                unit.movesUsed = 0;\n                unit.attackUsed = false;\n            };\n        },\n    },\n});\n\nexport const { move, select, attack, reset, endTurn } = gameSlice.actions;\n\nexport const getSelectedUnit = (state: GameState) =>\n    state.selectedUnit ? state.units[state.selectedUnit] : undefined;\n\nexport const getUnitList = (state: GameState) => Object.values(state.units);\n\nexport default gameSlice.reducer;\n","import { attack, move, select, unitAt, getUnitList } from \"./gameSlice\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { Position } from \"./Position\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport Unit from \"../unit/Unit\";\nimport styles from './Game.module.css';\n\n\ntype Props = {\n    position: Position,\n    color?: string,\n    selected: boolean,\n};\n\nconst isEmpty = (position: Position, units: Unit[]) => unitAt(position, units) === undefined;\n\nexport const GridCell = ({ position, color, selected }: Props) => {\n    const dispatch = useAppDispatch();\n    const units = useSelector((state: RootState) => getUnitList(state.game));\n    const handleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        switch (event.button) {\n            case 0:\n                if (isEmpty(position, units)) {\n                    dispatch(move(position)); break;\n                } else {\n                    dispatch(select(position)); break;\n                }\n            case 2:\n                dispatch(attack(position));\n                event.preventDefault();\n                break;\n\n        };\n    }\n    return <div\n        style={{ backgroundColor: color }}\n        className={selected ? styles.selected : undefined}\n        onContextMenu={handleClick}\n        onClick={handleClick}\n    ></div>;\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\"\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { RootState } from \"../../app/store\";\nimport Unit from \"../unit/Unit\";\nimport styles from './Game.module.css';\nimport { endTurn, reset, getUnitList, getSelectedUnit } from \"./gameSlice\";\nimport { GridCell } from \"./GridCell\";\nimport { Position } from \"./Position\";\n\nconst getColor = (position: Position, units: Unit[]) => {\n    for (const unit of units) {\n        for (let i = 0; i < unit.positions.length; i++) {\n            const unitPosition = unit.positions[i];\n            if (unitPosition.x === position.x && unitPosition.y === position.y) {\n                return i === unit.positions.length - 1 ? unit.stats.headColor : unit.stats.color;\n            }\n        }\n    }\n}\n\nconst positionOfGrid = (i: number, gridSize: { height: number, width: number }) => {\n    const x = Math.floor(i / gridSize.width);\n    const y = i % gridSize.height;\n    return { x, y };\n}\n\nconst isSelected = (position: Position, selectedUnit: Unit | undefined) => {\n    if (!selectedUnit) {\n        return false;\n    }\n    return selectedUnit.positions.some(\n        unitPosition => unitPosition.x === position.x && unitPosition.y === position.y\n    );\n}\n\nconst grid = (gridSize: { height: number, width: number }, units: Unit[], selectedUnit: Unit | undefined) =>\n    [...Array(gridSize.height * gridSize.width).keys()]\n        .map(i =>\n            <GridCell\n                key={i}\n                color={getColor(positionOfGrid(i, gridSize), units)}\n                selected={isSelected(positionOfGrid(i, gridSize), selectedUnit)}\n                position={positionOfGrid(i, gridSize)} />\n        );\n\nexport function Game() {\n    const dispatch = useAppDispatch();\n    const { gridSize, phase, selectedUnit, turn, units } =\n        useSelector((state: RootState) => ({\n            ...state.game,\n            units: getUnitList(state.game),\n            selectedUnit: getSelectedUnit(state.game),\n        }));\n    return (\n        <React.Fragment>\n            <p>Turn {turn + 1}</p> <button onClick={() => dispatch(endTurn())}>End Turn</button>\n            <p>{phase}{selectedUnit !== undefined ? \": \" + selectedUnit.stats.name : \"\"}</p>\n            <div className={styles.wrapper}>\n                {grid(gridSize, units, selectedUnit)}\n            </div>\n            <button onClick={() => dispatch(reset())}>reset</button>\n        </React.Fragment>\n    );\n}\n","import './App.css';\nimport { Game } from './features/game/Game';\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport gameReducer from '../features/game/gameSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    game: gameReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__3oH14\",\"selected\":\"Game_selected__7QQur\"};"],"sourceRoot":""}